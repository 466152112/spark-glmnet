/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// scalastyle:off println
package org.apache.spark.examples.ml

import org.apache.spark.{ SparkConf, SparkContext }
import org.apache.spark.sql.SQLContext
import org.apache.spark.ml.regression.LinearRegression
import org.apache.spark.annotation.Experimental
import org.apache.spark.mllib.util.LinearDataGenerator
import org.apache.spark.ml.tuning.{ CrossValidator, ParamGridBuilder }
import org.apache.spark.ml.evaluation.RegressionEvaluator
import org.apache.spark.ml.regression.LinearRegressionWithCD
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.ml.tuning.AutoGeneratedParamGridBuilder
import org.apache.spark.Logging

/**
 * A simple example demonstrating linear regression model selection using CrossValidator and auto-generated regParam values.
 */
// From spark/examples/src/main/scala/org/apache/spark/examples/ml/CrossValidatorExample.scala
// http://spark.apache.org/docs/latest/ml-guide.html
object LinearRegressionCrossValidatorExample extends Logging {

  def main(args: Array[String]) {
    val conf = new SparkConf().setAppName("LinearRegressionCrossValidatorExample")//.setMaster("local")
    val sc = new SparkContext(conf)
    val sqlContext = new SQLContext(sc)
    import sqlContext.implicits._

    val path = "data/sample_linear_regression_data.txt"
    val training = MLUtils.loadLibSVMFile(sc, path)

    val lr = (new LinearRegressionWithCD(""))
      .setMaxIter(100)

    val paramGrid = new AutoGeneratedParamGridBuilder()
      .addGrid(lr.elasticNetParam, Array(0.2, 0.3))
      .buildWithAutoGeneratedGrid("lambdaIndex", lr.getMaxIter)

    val crossval = (new CrossValidator(""))
      .setEstimator(lr)
      .setEvaluator(new RegressionEvaluator)
      .setEstimatorParamMaps(paramGrid)
      .setNumFolds(2) // Use 3+ in practice

    // Run cross-validation, and choose the best set of parameters.
    val cvModel = crossval.fit(training.toDF())
    logDebug(s"Best Model:\n ${cvModel.bestModel.explainParams}")
    
    //    // Prepare test documents, which are unlabeled.
    // LinearDataGenerator.generateLinearRDD(sc, numGenExamples, numGenFeatures, eps, numGenPartitions)
    //val test = LinearDataGenerator.generateLinearRDD(sc, 4, 10, 10)

    //    // Make predictions on test documents. cvModel uses the best model found (lrModel).
    //    cvModel.transform(test.toDF())
    //      .select("id", "text", "probability", "prediction")
    //      .collect()
    //      .foreach {
    //        case Row(id: Long, text: String, prob: Vector, prediction: Double) =>
    //          println(s"($id, $text) --> prob=$prob, prediction=$prediction")
    //      }

    sc.stop()
  }
}
// scalastyle:on println
